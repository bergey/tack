/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

import { manifest, version } from "@parcel/service-worker";

declare const self: ServiceWorkerGlobalScope;

// Precache all of the assets generated by our build process.
self.addEventListener("install", (event: ExtendableEvent) =>
  event.waitUntil(
    (async () => {
      const cache = await caches.open(version);
      await cache.addAll(manifest);
    })()
  )
);

// https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent
self.addEventListener("fetch", (event) => {
  // Let the browser do its default thing for non-GET requests.
  if (event.request.method !== "GET") return;

  // Prevent the default, and handle the request ourselves.
  event.respondWith(
    (async () => {
      // Try to get the response from a cache.
      const cache = await caches.open(version);
      const cachedResponse = await cache.match(event.request);

      if (cachedResponse) {
        return cachedResponse;
      } else {
        // If we didn't find a match in the cache, use the network.
        return fetch(event.request);
      }
    })()
  );
});

addEventListener("activate", (event) => {
  event.waitUntil(
    (async () => {
      const keys = await caches.keys();
      await Promise.all(keys.map((k) => k !== version && caches.delete(k)));
    })()
  );
});
